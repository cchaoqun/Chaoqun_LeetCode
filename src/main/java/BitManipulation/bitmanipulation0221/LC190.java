package BitManipulation.bitmanipulation0221;
/*
 * @Description: 190. 颠倒二进制位
颠倒给定的 32 位无符号整数的二进制位。



示例 1：

输入: 00000010100101000001111010011100
输出: 00111001011110000010100101000000
解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
     因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
示例 2：

输入：11111111111111111111111111111101
输出：10111111111111111111111111111111
解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
     因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。


提示：

请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。


进阶:
如果多次调用这个函数，你将如何优化你的算法？
 *
 * @param null
 * @return
 * @author Chaoqun
 * @creed: Talk is cheap,show me the code
 * @date 2021/2/21 22:29
 */
public class LC190 {

    // you need treat n as an unsigned value
    //简单点就是循环32次，每次获取最后一位,也就是n&1，与结果（初始为0）相或（res=n&1|res），再将n右移，结果左移。 最终的结果就是反转的数了
    public int reverseBits(int n) {
        int res = 0;
        for(int i=0; i<32; ++i){
            //结果左移一位,这样原本第0位的数字左移31次后到达了最高位
            res = res << 1;
            //获取最低位,n & 1(因为1最低位为1,其他位都为0,如果最低位为0,则为0, 最低位为1,则为1)
            // | res,将该位数放到对应位子上,循环结束后到达翻转后的位置上
            res = (n & 1) | res;
            //n右移一位
            n = n >> 1;
        }
        return res;
    }
}
