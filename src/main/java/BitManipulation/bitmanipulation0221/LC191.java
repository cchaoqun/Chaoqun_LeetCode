package BitManipulation.bitmanipulation0221;
/*
 * @Description: 191. 位1的个数
编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。



提示：

请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。


进阶：

如果多次调用这个函数，你将如何优化你的算法？


示例 1：

输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
示例 2：

输入：00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
示例 3：

输入：11111111111111111111111111111101
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。


提示：

输入必须是长度为 32 的 二进制串 。
 *
 * @param null
 * @return
 * @author Chaoqun
 * @creed: Talk is cheap,show me the code
 * @date 2021/2/21 23:59
 */
public class LC191 {
    // you need to treat n as an unsigned value
    //每次检查最小位,n右移一位
    public int hammingWeight(int n) {
        int count = 0;
        for(int i=0; i<32; ++i){
            //获取最低位
            count += n&1;
            //右移一位
            n = n >> 1;
        }
        return count;
    }

    //位掩码,检查每个位置
//    public int hammingWeight(int n){
//        int count = 0, mask = 1;
//        for(int i=0; i<32; ++i){
//            if((n & mask)!=0){
//                ++count;
//            }
//            mask <<= 1;
//        }
//        return count;
//    }

    //我们可以把前面的算法进行优化。我们不再检查数字的每一个位，而是不断把数字最后一个 11 反转，并把答案加一。
    // 当数字变成 00 的时候偶，我们就知道它没有 1 的位了，此时返回答案。
//    public int hammingWeight(int n){
//        int count = 0;
//        while(n!=0){
//            ++count;
//            n &= n-1;
//        }
//        return count;
//    }

}
