package JZOffer.review;

import java.util.Arrays;

/**剑指 Offer 60. n个骰子的点数
 把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。



 你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。



 示例 1:

 输入: 1
 输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]
 示例 2:

 输入: 2
 输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]


 限制：

 1 <= n <= 11
 * @author Chaoqun Cheng
 * @date 2021-07-2021/7/30-13:41
 */

public class jz60 {
    /**
     * n个筛子的点数范围是 [n,6n] 一共 6n-n+1 = 5n+1 种可能
     * dp[i][j] 表示i个筛子和为j的概率
     * 递推公式是 : 对于dp[i][j]可以由 dp[i-1][j-6] ~ dp[i-1][j-1]得到 所以 dp[i][j] = sum(dp[i-1][j-k]*1/6) 1<=k<=6
     * 但是这样可能会造成数组下标越界, 尝试正向推导
     * 对于每个dp[i][j] 可以对 dp[i+1][j+k] 1<=k<=6 造成贡献
     *      所以对每个dp[i][j] 更新dp[i+1][j+k] = dp[i][j]*1/6 1<=k<=6
     *
     */
    public double[] dicesProbability(int n){
        if(n<1){
            return new double[0];
        }
        // 一共n个色子, 最大范围是6*n 多出一行一列, 不需要考虑边界 取到的下标就是对应的色子数和点数和
        double[][] dp = new double[n+1][6*n+1];
        // 初始化一个色子n=1, 1-6的点数和概率为 1.0/6.0
        for(int i=1; i<=6; i++){
            dp[1][i] = 1.0/6.0;
        }
        double con = 1.0/6.0;
        // 从当前已知的i个色子的所有点数和的概率, [i, 6*i] dp[i][k]  i<=k<=6*i
        // 推导对i+1个色子的概率和影响 [i+1, 6*(i+1)] dp[i+1][j]  i+1<=j<=6*(i+1)
        for(int i=1; i<n; i++){
            // 遍历当前色子数i所有可能的点数和概率
            for(int j=i; j<=6*i; j++){
                //对于每个取到的值, 更新对其后6个位置的贡献
                for(int k=1; k<=6; k++){
                    // i+1个色子, 点数和j+k ,可以由当前 i个色子点数和j i+1个色子投掷了 k得到 1<=k<=6 并且i+1个色子任何点数概率都是con
                    dp[i+1][j+k] += dp[i][j]*con;
                }
            }
        }
        //最终n个 色子的点数和范围是[n, 6n] 复制到结果数组
        double[] res = Arrays.copyOfRange(dp[n], n,6*n+1);
        return res;
    }
}


























