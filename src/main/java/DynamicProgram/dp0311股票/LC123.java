package DynamicProgram.dp0311股票;
/*
 * @Description: 123. 买卖股票的最佳时机 III
给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。



示例 1:

输入：prices = [3,3,5,0,0,3,1,4]
输出：6
解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
示例 2：

输入：prices = [1,2,3,4,5]
输出：4
解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例 3：

输入：prices = [7,6,4,3,1]
输出：0
解释：在这个情况下, 没有交易完成, 所以最大利润为 0。
示例 4：

输入：prices = [1]
输出：0


提示：

1 <= prices.length <= 105
0 <= prices[i] <= 105
 *
 * @param null
 * @return
 * @author Chaoqun
 * @creed: Talk is cheap,show me the code
 * @date 2021/3/21 12:24
 */
public class LC123 {
    //状态定义：dp[i][j][k] 表示在 [0, i] 区间里（状态具有前缀性质），交易进行了 j 次，
    // 并且状态为 k 时我们拥有的现金数。其中 j 和 k 的含义如下：
    //j = 0 表示没有交易发生；
    //j = 1 表示此时已经发生了 11 次买入股票的行为；
    //j = 2 表示此时已经发生了 22 次买入股票的行为。
    //即我们 人为规定 记录一次交易产生是在 买入股票 的时候。
    //k = 0 表示当前不持股；
    //k = 1 表示当前持股。
    // 初始化
    // dp[0][0][0] = 0 第一天不持股未发生交易
    // dp[0][0][1] = 0 第一天未发生交易但是持股,这不可能设为0
    // dp[0][1][0] = 0 发生了一次交易,但是不持股 不可能
    // dp[0][1][1] = -price[0] 发生了一次交易,并且持股, 持有的现金数为第一天股价的相反数
    // dp[0][2][0] = 0 发生了两次交易,但是不持股,不可能
    // dp[0][2][1] = Integer.MIN_VALUE 发生了两次交易,并且持股

    public int maxProfit(int[] prices){
        //dp[i][0][0] = [0,i]区间发生了0次买入的操作,并且i天结束后不持股
        //dp[i][0][1] = [0,i]区间发生了0次买入的操作,并且i天结束后持股,这不可能,设为0
        //dp[i][1][0] = [0,i]区间发生了1次买入的操作,并且i天结束后不持股
        //dp[i][1][1] = [0,i]区间发生了1次买入的操作,并且i天结束后持股
        //dp[i][2][0] = [0,i]区间发生了2次买入的操作,并且i天结束后不持股
        //dp[i][2][1] = [0,i]区间发生了2次买入的操作,并且i天结束后持股
        int[][][] dp = new int[prices.length][3][2];
        //第一天结束不持股,发生0次买入,
        dp[0][0][0] = 0;
        //第一天结束持股,发生0次买入,这不可能
        dp[0][0][1] = 0;
        //第一天结束不持股,发生1次买入,一定是第一天买入,但是第一天结束不持股,这不可能
        dp[0][1][0] = 0;
        //第一天结束持股,发生1次买入,一定是第一天买入
        dp[0][1][1] = -prices[0];
        //第一天结束不持股,发生2次买入,不可能第一天结束最多发生1次买入操作
        dp[0][2][0] = 0;
        //第二天的状态 dp[1][2][1] = Math.max(dp[0][2][1],dp[0][1][0]-prices[1])
        //可以看到第二条的这个状态用到了第一天的dp[0][2][1],如果这个值为0, 则一定会选这个因为dp[0][1][0]-prices[1]<0
        //但是这个状态事实上是没有意义的,所以不会选,定义成最小值就可免除这个干扰
        dp[0][2][1] = Integer.MIN_VALUE;

        for(int i=1; i<prices.length; ++i){
            //未发生交易则不需要管
            //dp[i][0][0] =
            //dp[i][0][1] =
            //第i天结束,发生了 1 次买入,当天结束不持股
            //昨天结束发生一次买入,昨天结束不持股 || 昨天结束发生一次买入,昨天结束持股,今天卖出
            dp[i][1][0] = Math.max(dp[i-1][1][0], dp[i-1][1][1]+prices[i]);

            ////第i天结束,发生了 1 次买入,当天结束持股
            //昨天结束发生1次买入,昨天结束持股 || 昨天结束未发生交易,今天第一次买入
            dp[i][1][1] = Math.max(dp[i-1][1][1], -prices[i]);

            //第i天结束,发生了 2 次买入,当天结束不持股
            //昨天结束发生2次买入,昨天结束持股 || 昨天结束发生2次买入,昨天结束持股,今天卖出
            dp[i][2][0] = Math.max(dp[i-1][2][0], dp[i-1][2][1]+prices[i]);

            //第i天结束,发生了 2 次买入,当天结束持股
            //昨天结束发生2次买入,昨天结束持股 || 昨天结束发生1次买入,昨天结束不持股,今天买入
            dp[i][2][1] = Math.max(dp[i-1][2][1], dp[i-1][1][0]-prices[i]);
        }
        //最大利润为 发生了1次交易最后天不持股 或者发生了2次交易最后一天不持股
        return Math.max(dp[prices.length-1][1][0], dp[prices.length-1][2][0]);
    }
}

class LC123_M2{
    //二维dp
    public int maxProfit(int[] prices){
        int[][] dp = new int[3][2];
        //第一天结束持股,发生一次交易即第一天买入
        dp[1][1] = -prices[0];
        dp[2][1] = Integer.MIN_VALUE;
        for(int i=1; i<prices.length; ++i){
            //i天结束发生1次交易,持股
            int dp11 = Math.max(dp[1][1], -prices[i]);
            //i天结束发生1次交易,不持股
            int dp10 = Math.max(dp[1][0], dp[1][1]+prices[i]);
            //i天结束发生2次交易,持股
            int dp21 = Math.max(dp[2][1], dp[1][0]-prices[i]);
            //i天结束发生1次交易,不持股
            int dp20 = Math.max(dp[2][0], dp[2][1]+prices[i]);
            dp[1][1] = dp11;
            dp[1][0] = dp10;
            dp[2][1] = dp21;
            dp[2][0] = dp20;
        }
        return Math.max(dp[1][0], dp[2][0]);
    }

}