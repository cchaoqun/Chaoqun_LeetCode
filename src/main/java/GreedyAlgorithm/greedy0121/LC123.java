package GreedyAlgorithm.greedy0121;
/*
 * @Description: 123. 买卖股票的最佳时机 III
给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

 

示例 1:

输入：prices = [3,3,5,0,0,3,1,4]
输出：6
解释：在第 4 天（股票价格 = 0）的时候买入，
在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
随后，在第 7 天（股票价格 = 1）的时候买入
在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
*
示例 2：
输入：prices = [1,2,3,4,5]
输出：4
解释：在第 1 天（股票价格 = 1）的时候买入，
在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
*
示例 3：
输入：prices = [7,6,4,3,1]
输出：0
解释：在这个情况下, 没有交易完成, 所以最大利润为 0。
*
示例 4：
输入：prices = [1]
输出：0

提示：

1 <=prices.length <= 105
0 <=prices[i] <=105

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * @param null
 * @return
 * @author Chaoqun
 * @creed: Talk is cheap,show me the code
 * @date 2021/1/22 9:36
 */
public class LC123 {

    //状态定义：dp[i][j][k] 表示在 [0, i] 区间里（状态具有前缀性质），交易进行了 j 次，
    // 并且状态为 k 时我们拥有的现金数。其中 j 和 k 的含义如下：
    //j = 0 表示没有交易发生；
    //j = 1 表示此时已经发生了 11 次买入股票的行为；
    //j = 2 表示此时已经发生了 22 次买入股票的行为。
    //即我们 人为规定 记录一次交易产生是在 买入股票 的时候。
    //k = 0 表示当前不持股；
    //k = 1 表示当前持股。
    // 初始化
    // dp[0][0][0] = 0 第一天不持股未发生交易
    // dp[0][0][1] = 0 第一天未发生交易但是持股,这不可能设为0
    // dp[0][1][0] = 0 发生了一次交易,但是不持股 不可能
    // dp[0][1][1] = -price[0] 发生了一次交易,并且持股, 持有的现金数为第一天股价的相反数
    // dp[0][2][0] = 0 发生了两次交易,但是不持股,不可能
    // dp[0][2][1] = Integer.MIN_VALUE 发生了两次交易,并且持股
    public int maxProfit(int[] prices) {
        int len = prices.length;
        if(len == 0 || len == 1){
            return 0;
        }
        // dp三维数组
        // 第一维 0~i天
        // 第二维 0:未发生交易; 1:发生一次交易; 2:发生两次交易
        // 第三维 0:当前不持股; 1:当前持股
        int[][][] dp = new int[len][3][2];
        //初始化
        dp[0][1][1] = -prices[0];
        //这个状态可能会被第一天的状态dp[1][2][1/0]用到.如果初始化为0, 则会影响取较大值的操作,如果另一个数为负数,则会取到该值(如果等于0),所以要设置为较小值,或者列表中股价相反数不可能达到的值,这样不影响后续的状态转移
        dp[0][2][1] = Integer.MIN_VALUE;
        for(int i=1; i<len; ++i){
            //状态转移
            //之前发生一次交易,当天不持股: 昨天不持股dp[i-1][0] 和 昨天持股,今天卖出dp[i-1][1][1]+prices[i]
            dp[i][1][0] = Math.max(dp[i-1][1][0],dp[i-1][1][1]+prices[i]);
            //之前发生一次交易,当天持股: 昨天持股dp[i-1][1][1], 和 之前都发生交易,今天第一次买入-prices[i]
            dp[i][1][1] = Math.max(dp[i-1][1][1], -prices[i]);
            //之前发生两次交易,当天不持股: 昨天不持股dp[i-1][2][0] 和 昨天持股,昨天之前发生两次交易,今天卖出dp[i-1][2][1]+prices[i]
            dp[i][2][0] = Math.max(dp[i-1][2][0], dp[i-1][2][1]+prices[i]);
            //之前发生两次交易,当天持股: 昨天持股dp[i-1][2][1], 昨天不持股,昨天之前发生一次交易,今天买入dp[i-1][1][0]-prices[i]
            dp[i][2][1] = Math.max(dp[i-1][2][1], dp[i-1][1][0]-prices[i]);
        }
        //最大利润为最后一天之前发生两次交易,不持股 和 最后一天之前发生一次交易不持股的最大值
        return Math.max(dp[len-1][2][0], dp[len-1][1][0]);

    }

//    //只参考昨天的状态,去掉第一维,不影响
//    public int maxProfit(int[] prices){
//        int len = prices.length;
//        if(len == 0 || len == 1){
//            return 0;
//        }
//        // dp二维数组
//        // 第二维 0:未发生交易; 1:发生一次交易; 2:发生两次交易
//        // 第三维 0:当前不持股; 1:当前持股
//        int[][] dp = new int[3][2];
//        //初始化
//        dp[1][1] = -prices[0];
//        dp[2][1] = Integer.MIN_VALUE;
//        for(int i=1; i<len; ++i){
//            dp[1][0] = Math.max(dp[1][0], dp[1][1]+prices[i]);
//            dp[1][1] = Math.max(dp[1][1], -prices[i]);
//            dp[2][0] = Math.max(dp[2][0], dp[2][1]+prices[i]);
//            dp[2][1] = Math.max(dp[2][1], dp[1][0]-prices[i]);
//        }
//        return Math.max(dp[1][0], dp[2][0]);
//    }
}
