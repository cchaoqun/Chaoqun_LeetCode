package Algorithm_HW.Week2;

/**1329. 将矩阵按对角线排序
 矩阵对角线 是一条从矩阵最上面行或者最左侧列中的某个元素开始的对角线，沿右下方向一直到矩阵末尾的元素。例如，矩阵 mat 有 6 行 3 列，从 mat[2][0] 开始的 矩阵对角线 将会经过 mat[2][0]、mat[3][1] 和 mat[4][2] 。

 给你一个 m * n 的整数矩阵 mat ，请你将同一条 矩阵对角线 上的元素按升序排序后，返回排好序的矩阵。



 示例 1：



 输入：mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]
 输出：[[1,1,1,1],[1,2,2,2],[1,2,3,3]]
 示例 2：

 输入：mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]
 输出：[[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]


 提示：

 m == mat.length
 n == mat[i].length
 1 <= m, n <= 100
 1 <= mat[i][j] <= 100
 * @author Chaoqun Cheng
 * @date 2021-06-2021/6/9-0:37
 */

public class LC1572 {
    public int diagonalSum(int[][] mat) {
        /*
        矩阵维度为奇数才需要减去重复的元素
        偶数无需减去
        先统计两条对角线的元素和
        如果为奇数, 减去mat[mat.length/2 mat.length/2]
         */
        int n = mat.length;
        //主对角线起始坐标点[r1,c1]
        int r1 = 0;
        int c1 = 0;
        //副对角线起始坐标点[r2,c2]
        int r2 = 0;
        int c2 = n-1;
        //和
        int sum  = 0;
        for(int i=0; i<n; i++){
            sum += mat[r1++][c1++];
            sum += mat[r2++][c2--];
        }
        //奇数的情况下需要减去重复的终点值 mat[n/2][n/2];
        if((n&1)==1){
            sum -= mat[n/2][n/2];
        }
        return sum;
    }
}
