package Tree.tree0419;

import Tree.TreeNode;

/**
 *1457. 二叉树中的伪回文路径
 * 给你一棵二叉树，每个节点的值为 1 到 9 。我们称二叉树中的一条路径是 「伪回文」的，当它满足：路径经过的所有节点值的排列中，存在一个回文序列。
 *
 * 请你返回从根到叶子节点的所有路径中 伪回文 路径的数目。
 *
 *
 *
 * 示例 1：
 *
 *
 *
 * 输入：root = [2,3,1,3,1,null,1]
 * 输出：2
 * 解释：上图为给定的二叉树。总共有 3 条从根到叶子的路径：红色路径 [2,3,3] ，绿色路径 [2,1,1] 和路径 [2,3,1] 。
 *      在这些路径中，只有红色和绿色的路径是伪回文路径，因为红色路径 [2,3,3] 存在回文排列 [3,2,3] ，绿色路径 [2,1,1] 存在回文排列 [1,2,1] 。
 * 示例 2：
 *
 *
 *
 * 输入：root = [2,1,1,1,3,null,null,null,null,null,1]
 * 输出：1
 * 解释：上图为给定二叉树。总共有 3 条从根到叶子的路径：绿色路径 [2,1,1] ，路径 [2,1,3,1] 和路径 [2,1] 。
 *      这些路径中只有绿色路径是伪回文路径，因为 [2,1,1] 存在回文排列 [1,2,1] 。
 * 示例 3：
 *
 * 输入：root = [9]
 * 输出：1
 *
 *
 * 提示：
 *
 * 给定二叉树的节点数目在 1 到 10^5 之间。
 * 节点值在 1 到 9 之间。
 * @author Chaoqun Cheng
 * @date 2021-04-2021/4/19-17:40
 */

public class LC1457 {
    int count;
    public int pseudoPalindromicPaths (TreeNode root) {
        this.count = 0;
        dfs(root,0);
        return count;
    }

    public void dfs(TreeNode node, int n){
        if(node==null){
            return;
        }
        //1<<node.val 代表当前结点的值左移结点值个位数
        //n^() 表示对应位置上相等的变成0, 即该数出现偶数次,最后会抵消掉, 奇数次会保留1
        n^=(1<<node.val);
        //叶子结点
        if(node.left==null && node.right==null){
            // n=0, 说明根结点到当前结点的路径上所有结点值出现的次数都为偶数次可以为回文串
            // n&(n-1) = 0, 说明只有一位数字出现了奇数次 也可以是回文串
            if(n==0 || (n&(n-1))==0){
                count++;
            }
        }
        dfs(node.left, n);
        dfs(node.right, n);

    }
}
